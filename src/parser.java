
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun May 16 12:27:33 CDT 2021
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.FileWriter;
import java.io.IOException;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun May 16 12:27:33 CDT 2021
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\054\000\002\002\003\000\002\002\004\000\002\003" +
    "\005\000\002\004\004\000\002\004\002\000\002\005\006" +
    "\000\002\005\007\000\002\005\011\000\002\005\007\000" +
    "\002\005\005\000\002\005\007\000\002\005\003\000\002" +
    "\007\005\000\002\007\005\000\002\007\005\000\002\007" +
    "\005\000\002\007\005\000\002\007\004\000\002\007\004" +
    "\000\002\010\003\000\002\010\004\000\002\016\004\000" +
    "\002\016\004\000\002\016\003\000\002\015\005\000\002" +
    "\015\005\000\002\015\003\000\002\011\005\000\002\011" +
    "\003\000\002\012\005\000\002\012\005\000\002\012\003" +
    "\000\002\013\005\000\002\013\005\000\002\013\005\000" +
    "\002\013\005\000\002\013\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\006\000\002\014" +
    "\003\000\002\006\005\000\002\006\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\137\000\004\007\005\001\002\000\004\002\141\001" +
    "\002\000\024\007\005\010\ufffd\012\013\014\007\016\021" +
    "\017\016\020\020\046\017\047\014\001\002\000\004\002" +
    "\001\001\002\000\004\047\135\001\002\000\026\007\ufff6" +
    "\010\ufff6\012\ufff6\013\ufff6\014\ufff6\016\ufff6\017\ufff6\020" +
    "\ufff6\046\ufff6\047\ufff6\001\002\000\004\010\134\001\002" +
    "\000\004\037\131\001\002\000\004\005\123\001\002\000" +
    "\004\037\uffea\001\002\000\024\007\005\010\ufffd\012\013" +
    "\014\007\016\021\017\016\020\020\046\017\047\014\001" +
    "\002\000\020\022\037\023\036\024\045\025\044\026\041" +
    "\027\040\030\042\001\002\000\004\047\035\001\002\000" +
    "\004\021\023\001\002\000\004\047\022\001\002\000\004" +
    "\037\uffec\001\002\000\006\047\024\050\025\001\002\000" +
    "\010\004\uffee\047\uffee\050\uffee\001\002\000\012\004\uffd6" +
    "\011\032\047\uffd6\050\uffd6\001\002\000\006\047\024\050" +
    "\025\001\002\000\004\004\030\001\002\000\026\007\ufff7" +
    "\010\ufff7\012\ufff7\013\ufff7\014\ufff7\016\ufff7\017\ufff7\020" +
    "\ufff7\046\ufff7\047\ufff7\001\002\000\010\004\uffed\047\uffed" +
    "\050\uffed\001\002\000\004\050\033\001\002\000\014\004" +
    "\uffd6\011\032\041\uffd6\047\uffd6\050\uffd6\001\002\000\012" +
    "\004\uffd7\041\uffd7\047\uffd7\050\uffd7\001\002\000\004\037" +
    "\uffeb\001\002\000\006\047\024\050\025\001\002\000\016" +
    "\017\066\031\061\032\063\040\067\047\064\050\062\001" +
    "\002\000\006\047\024\050\025\001\002\000\006\047\024" +
    "\050\025\001\002\000\006\047\024\050\025\001\002\000" +
    "\004\004\051\001\002\000\006\047\024\050\025\001\002" +
    "\000\006\047\024\050\025\001\002\000\006\047\024\050" +
    "\025\001\002\000\004\004\ufff1\001\002\000\004\004\ufff0" +
    "\001\002\000\026\007\ufff8\010\ufff8\012\ufff8\013\ufff8\014" +
    "\ufff8\016\ufff8\017\ufff8\020\ufff8\046\ufff8\047\ufff8\001\002" +
    "\000\004\004\uffef\001\002\000\006\047\024\050\025\001" +
    "\002\000\004\004\ufff3\001\002\000\006\047\024\050\025" +
    "\001\002\000\004\004\ufff2\001\002\000\016\004\uffe7\006" +
    "\uffe7\033\116\034\uffe7\047\uffe7\050\uffe7\001\002\000\010" +
    "\034\114\047\024\050\025\001\002\000\032\004\uffdc\006" +
    "\uffdc\033\uffdc\034\uffdc\035\uffdc\036\uffdc\042\uffdc\043\uffdc" +
    "\044\uffdc\045\uffdc\047\uffdc\050\uffdc\001\002\000\032\004" +
    "\uffda\006\uffda\033\uffda\034\uffda\035\uffda\036\uffda\042\uffda" +
    "\043\uffda\044\uffda\045\uffda\047\uffda\050\uffda\001\002\000" +
    "\032\004\uffdb\006\uffdb\033\uffdb\034\uffdb\035\uffdb\036\uffdb" +
    "\042\uffdb\043\uffdb\044\uffdb\045\uffdb\047\uffdb\050\uffdb\001" +
    "\002\000\032\004\uffd8\006\uffd8\033\uffd8\034\uffd8\035\uffd8" +
    "\036\uffd8\042\uffd8\043\uffd8\044\uffd8\045\uffd8\047\uffd8\050" +
    "\uffd8\001\002\000\032\004\uffdd\006\uffdd\033\uffdd\034\uffdd" +
    "\035\uffdd\036\uffdd\042\104\043\103\044\105\045\106\047" +
    "\uffdd\050\uffdd\001\002\000\020\022\037\023\036\024\045" +
    "\025\044\026\041\027\040\030\042\001\002\000\004\050" +
    "\076\001\002\000\022\004\uffe2\006\uffe2\033\uffe2\034\uffe2" +
    "\035\uffe2\036\uffe2\047\uffe2\050\uffe2\001\002\000\022\004" +
    "\uffe5\006\uffe5\033\uffe5\034\uffe5\035\072\036\073\047\uffe5" +
    "\050\uffe5\001\002\000\014\031\061\032\063\040\067\047" +
    "\064\050\062\001\002\000\014\031\061\032\063\040\067" +
    "\047\064\050\062\001\002\000\022\004\uffe3\006\uffe3\033" +
    "\uffe3\034\uffe3\035\uffe3\036\uffe3\047\uffe3\050\uffe3\001\002" +
    "\000\022\004\uffe4\006\uffe4\033\uffe4\034\uffe4\035\uffe4\036" +
    "\uffe4\047\uffe4\050\uffe4\001\002\000\006\011\032\041\uffd6" +
    "\001\002\000\004\041\100\001\002\000\032\004\uffd9\006" +
    "\uffd9\033\uffd9\034\uffd9\035\uffd9\036\uffd9\042\uffd9\043\uffd9" +
    "\044\uffd9\045\uffd9\047\uffd9\050\uffd9\001\002\000\004\004" +
    "\102\001\002\000\014\004\uffe9\006\uffe9\034\uffe9\047\uffe9" +
    "\050\uffe9\001\002\000\014\031\061\032\063\040\067\047" +
    "\064\050\062\001\002\000\014\031\061\032\063\040\067" +
    "\047\064\050\062\001\002\000\014\031\061\032\063\040" +
    "\067\047\064\050\062\001\002\000\014\031\061\032\063" +
    "\040\067\047\064\050\062\001\002\000\022\004\uffdf\006" +
    "\uffdf\033\uffdf\034\uffdf\035\uffdf\036\uffdf\047\uffdf\050\uffdf" +
    "\001\002\000\022\004\uffde\006\uffde\033\uffde\034\uffde\035" +
    "\uffde\036\uffde\047\uffde\050\uffde\001\002\000\022\004\uffe1" +
    "\006\uffe1\033\uffe1\034\uffe1\035\uffe1\036\uffe1\047\uffe1\050" +
    "\uffe1\001\002\000\022\004\uffe0\006\uffe0\033\uffe0\034\uffe0" +
    "\035\uffe0\036\uffe0\047\uffe0\050\uffe0\001\002\000\004\004" +
    "\ufff5\001\002\000\014\031\061\032\063\040\067\047\064" +
    "\050\062\001\002\000\016\004\uffe8\006\uffe8\033\116\034" +
    "\uffe8\047\uffe8\050\uffe8\001\002\000\014\031\061\032\063" +
    "\040\067\047\064\050\062\001\002\000\022\004\uffe6\006" +
    "\uffe6\033\uffe6\034\uffe6\035\072\036\073\047\uffe6\050\uffe6" +
    "\001\002\000\006\047\024\050\025\001\002\000\004\004" +
    "\ufff4\001\002\000\004\010\ufffe\001\002\000\016\017\066" +
    "\031\061\032\063\040\067\047\064\050\062\001\002\000" +
    "\006\006\125\034\114\001\002\000\022\007\005\012\013" +
    "\014\007\016\021\017\016\020\020\046\017\047\014\001" +
    "\002\000\026\007\ufffb\010\ufffb\012\ufffb\013\127\014\ufffb" +
    "\016\ufffb\017\ufffb\020\ufffb\046\ufffb\047\ufffb\001\002\000" +
    "\022\007\005\012\013\014\007\016\021\017\016\020\020" +
    "\046\017\047\014\001\002\000\026\007\ufffa\010\ufffa\012" +
    "\ufffa\013\ufffa\014\ufffa\016\ufffa\017\ufffa\020\ufffa\046\ufffa" +
    "\047\ufffa\001\002\000\016\017\066\031\061\032\063\040" +
    "\067\047\064\050\062\001\002\000\006\004\133\034\114" +
    "\001\002\000\026\007\ufffc\010\ufffc\012\ufffc\013\ufffc\014" +
    "\ufffc\016\ufffc\017\ufffc\020\ufffc\046\ufffc\047\ufffc\001\002" +
    "\000\030\002\uffff\007\uffff\010\uffff\012\uffff\013\uffff\014" +
    "\uffff\016\uffff\017\uffff\020\uffff\046\uffff\047\uffff\001\002" +
    "\000\004\015\136\001\002\000\004\047\137\001\002\000" +
    "\022\007\005\012\013\014\007\016\021\017\016\020\020" +
    "\046\017\047\014\001\002\000\026\007\ufff9\010\ufff9\012" +
    "\ufff9\013\ufff9\014\ufff9\016\ufff9\017\ufff9\020\ufff9\046\ufff9" +
    "\047\ufff9\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\137\000\006\002\003\003\005\001\001\000\002\001" +
    "\001\000\012\003\007\004\010\005\014\016\011\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\003\007\004\121\005\014\016\011\001" +
    "\001\000\004\007\042\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
    "\025\001\001\000\002\001\001\000\004\006\030\001\001" +
    "\000\004\010\026\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\033" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
    "\117\001\001\000\014\011\056\012\070\013\067\014\064" +
    "\015\057\001\001\000\004\010\054\001\001\000\004\010" +
    "\052\001\001\000\004\010\051\001\001\000\002\001\001" +
    "\000\004\010\047\001\001\000\004\010\045\001\001\000" +
    "\004\010\046\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\010\053\001" +
    "\001\000\002\001\001\000\004\010\055\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\112\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\100\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\013\074\014\064\001\001\000\006\013\073\014\064\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\076" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\014\111\001\001\000\004" +
    "\014\110\001\001\000\004\014\107\001\001\000\004\014" +
    "\106\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\011" +
    "\114\012\070\013\067\014\064\001\001\000\002\001\001" +
    "\000\010\012\116\013\067\014\064\001\001\000\002\001" +
    "\001\000\004\010\120\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\011\056\012\070\013\067\014\064\015" +
    "\123\001\001\000\002\001\001\000\010\003\007\005\125" +
    "\016\011\001\001\000\002\001\001\000\010\003\007\005" +
    "\127\016\011\001\001\000\002\001\001\000\014\011\056" +
    "\012\070\013\067\014\064\015\131\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\003\007\005\137\016\011\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error");
         if (info instanceof java_cup.runtime.Symbol) {

            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {
                m.append(" in line "+(s.left+1));

                if (s.right >= 0) {
                    m.append(", column "+(s.right+1));
                }
            }
        }

        m.append(" : "+message);
        System.err.println(m);
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {



 public String testString = "" ; 


  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // strings ::= 
            {
              String RESULT =null;
		 RESULT = ""; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("strings",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // strings ::= UNION STRING strings 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ss = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ", " + s + ss; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("strings",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // factor ::= ID 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = id; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // factor ::= LBRACKET STRING strings RBRACKET 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String ss = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = "[" + s + ss + "]"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // factor ::= STRING 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // factor ::= FALSE 
            {
              String RESULT =null;
		 RESULT = "false"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // factor ::= TRUE 
            {
              String RESULT =null;
		 RESULT = "true"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // rel ::= factor 
            {
              String RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // rel ::= factor EQUALBIGGER factor 
            {
              String RESULT =null;
		int f1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String f1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = f1 + " >= " + f2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // rel ::= factor EQUALLESSER factor 
            {
              String RESULT =null;
		int f1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String f1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = f1 + " <= " + f2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // rel ::= factor BIGGER factor 
            {
              String RESULT =null;
		int f1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String f1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = f1 + " > " + f2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // rel ::= factor LESS factor 
            {
              String RESULT =null;
		int f1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String f1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = f1 + " < " + f2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // igualdad ::= rel 
            {
              String RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = r; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("igualdad",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // igualdad ::= igualdad DIFFERENT rel 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i + " != " + r; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("igualdad",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // igualdad ::= igualdad EQUAL rel 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i + " == " + r; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("igualdad",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // comb ::= igualdad 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comb",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // comb ::= comb AND igualdad 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = c + " && " + i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comb",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // bool ::= comb 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // bool ::= bool OR comb 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = b + " || " + c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // bool ::= CONVERSATION actions SEMI 
            {
              String RESULT =null;
		int actleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int actright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String act = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = act + ";\n"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // loc ::= ID 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = id;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("loc",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // loc ::= LET ID 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = "let " + id; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("loc",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // loc ::= CONST ID 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "const " + id; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("loc",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // option ::= STRING strings 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ss = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s + ss; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("option",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // option ::= ID 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = id; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("option",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // actions ::= MEMBERS option 
            {
              String RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "slack.api('conversations.members', {\n\tchannel: " + op + "\n})";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("actions",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // actions ::= ARCHIVE option 
            {
              String RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "slack.api('conversations.archive', {\n\ttchannel: " + op + "\n})";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("actions",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // actions ::= PURPOSE option option 
            {
              String RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String op2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "slack.api('conversations.setPurpose', {\n\tchannel: " + op1 +",\n\tpurpose: " + op2 + "\n})";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("actions",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // actions ::= RENAME option option 
            {
              String RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String op2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "slack.api('conversations.rename', {\n\ttchannel: " + op1 +",\n\tname: " + op2 + "\n})";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("actions",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // actions ::= KICK option option 
            {
              String RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String op2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "slack.api('conversations.kick', {\n\ttchannel: " + op1 +",\n\tuser: " + op2 + "\n})";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("actions",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // actions ::= INVITE option option 
            {
              String RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String op2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "slack.api('conversations.invite', {\n\tchannel: " + op1 +",\n\tusers: " + op2 + "\n})";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("actions",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // actions ::= CREATE bool option 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "slack.api('conversations.create', {\n\tis_private: " + b +",\n\tname: " + op + "\n})";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("actions",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instr ::= bloque 
            {
              String RESULT =null;
		int blleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int blright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String bl = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "{\n" + bl + "}\n"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instr ::= CHAT MESSAGE option option SEMI 
            {
              String RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String op1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                    	RESULT = "slack.api('chat.postMessage', {\n\tchannel: " + op1 + ",\n\ttext: " + op2 + "\n});\n"; 
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instr ::= CONVERSATION actions SEMI 
            {
              String RESULT =null;
		int actleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int actright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String act = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                    	RESULT = act + ";\n";  
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instr ::= FOR ID IN ID instr 
            {
              String RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    	RESULT = id2 + ".forEach(" + id1 + " => " + i + ");\n"; 
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instr ::= IF LPAREN bool RPAREN instr ELSE instr 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    	RESULT = "if( " + b + " )" + i1 + "else\n" + i2;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instr ::= IF LPAREN bool RPAREN instr 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    	RESULT = "if( " + b + " )" + i;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instr ::= loc ASSIGN bool SEMI 
            {
              String RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
    					RESULT = l + " = " + b + ";\n"; 
    				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instrs ::= 
            {
              String RESULT =null;
		 RESULT = ""; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrs",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instrs ::= instr instrs 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ins = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i + ins;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrs",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // bloque ::= LKEY instrs RKEY 
            {
              String RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String ins = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = ins;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // programa ::= bloque 
            {
              String RESULT =null;
		int blleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int blright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String bl = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						 RESULT = "const Slack = require('slack');\nslack = Slack();\n\n" + bl; 
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

