
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon May 17 11:19:21 CDT 2021
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon May 17 11:19:21 CDT 2021
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\057\000\002\002\003\000\002\002\004\000\002\003" +
    "\005\000\002\004\004\000\002\004\002\000\002\005\006" +
    "\000\002\005\007\000\002\005\011\000\002\017\002\000" +
    "\002\005\010\000\002\005\005\000\002\005\007\000\002" +
    "\005\003\000\002\005\004\000\002\005\004\000\002\007" +
    "\005\000\002\007\005\000\002\007\005\000\002\007\005" +
    "\000\002\007\005\000\002\007\004\000\002\007\004\000" +
    "\002\010\003\000\002\010\004\000\002\016\004\000\002" +
    "\016\004\000\002\016\003\000\002\015\005\000\002\015" +
    "\005\000\002\015\003\000\002\011\005\000\002\011\003" +
    "\000\002\012\005\000\002\012\005\000\002\012\003\000" +
    "\002\013\005\000\002\013\005\000\002\013\005\000\002" +
    "\013\005\000\002\013\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\006\000\002\014\003" +
    "\000\002\006\005\000\002\006\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\143\000\004\007\005\001\002\000\004\002\145\001" +
    "\002\000\026\003\015\007\005\010\ufffd\012\013\014\007" +
    "\016\022\017\017\020\021\046\020\047\014\001\002\000" +
    "\004\002\001\001\002\000\004\047\140\001\002\000\030" +
    "\003\ufff5\007\ufff5\010\ufff5\012\ufff5\013\ufff5\014\ufff5\016" +
    "\ufff5\017\ufff5\020\ufff5\046\ufff5\047\ufff5\001\002\000\004" +
    "\010\137\001\002\000\004\037\134\001\002\000\004\005" +
    "\126\001\002\000\004\037\uffe7\001\002\000\006\004\124" +
    "\010\125\001\002\000\026\003\015\007\005\010\ufffd\012" +
    "\013\014\007\016\022\017\017\020\021\046\020\047\014" +
    "\001\002\000\020\022\040\023\037\024\046\025\045\026" +
    "\042\027\041\030\043\001\002\000\004\047\036\001\002" +
    "\000\004\021\024\001\002\000\004\047\023\001\002\000" +
    "\004\037\uffe9\001\002\000\006\047\025\050\026\001\002" +
    "\000\010\004\uffeb\047\uffeb\050\uffeb\001\002\000\012\004" +
    "\uffd3\011\033\047\uffd3\050\uffd3\001\002\000\006\047\025" +
    "\050\026\001\002\000\004\004\031\001\002\000\030\003" +
    "\ufff6\007\ufff6\010\ufff6\012\ufff6\013\ufff6\014\ufff6\016\ufff6" +
    "\017\ufff6\020\ufff6\046\ufff6\047\ufff6\001\002\000\010\004" +
    "\uffea\047\uffea\050\uffea\001\002\000\004\050\034\001\002" +
    "\000\014\004\uffd3\011\033\041\uffd3\047\uffd3\050\uffd3\001" +
    "\002\000\012\004\uffd4\041\uffd4\047\uffd4\050\uffd4\001\002" +
    "\000\004\037\uffe8\001\002\000\006\047\025\050\026\001" +
    "\002\000\016\017\067\031\062\032\064\040\070\047\065" +
    "\050\063\001\002\000\006\047\025\050\026\001\002\000" +
    "\006\047\025\050\026\001\002\000\006\047\025\050\026" +
    "\001\002\000\004\004\052\001\002\000\006\047\025\050" +
    "\026\001\002\000\006\047\025\050\026\001\002\000\006" +
    "\047\025\050\026\001\002\000\004\004\uffee\001\002\000" +
    "\004\004\uffed\001\002\000\030\003\ufff7\007\ufff7\010\ufff7" +
    "\012\ufff7\013\ufff7\014\ufff7\016\ufff7\017\ufff7\020\ufff7\046" +
    "\ufff7\047\ufff7\001\002\000\004\004\uffec\001\002\000\006" +
    "\047\025\050\026\001\002\000\004\004\ufff0\001\002\000" +
    "\006\047\025\050\026\001\002\000\004\004\uffef\001\002" +
    "\000\016\004\uffe4\006\uffe4\033\117\034\uffe4\047\uffe4\050" +
    "\uffe4\001\002\000\010\034\115\047\025\050\026\001\002" +
    "\000\032\004\uffd9\006\uffd9\033\uffd9\034\uffd9\035\uffd9\036" +
    "\uffd9\042\uffd9\043\uffd9\044\uffd9\045\uffd9\047\uffd9\050\uffd9" +
    "\001\002\000\032\004\uffd7\006\uffd7\033\uffd7\034\uffd7\035" +
    "\uffd7\036\uffd7\042\uffd7\043\uffd7\044\uffd7\045\uffd7\047\uffd7" +
    "\050\uffd7\001\002\000\032\004\uffd8\006\uffd8\033\uffd8\034" +
    "\uffd8\035\uffd8\036\uffd8\042\uffd8\043\uffd8\044\uffd8\045\uffd8" +
    "\047\uffd8\050\uffd8\001\002\000\032\004\uffd5\006\uffd5\033" +
    "\uffd5\034\uffd5\035\uffd5\036\uffd5\042\uffd5\043\uffd5\044\uffd5" +
    "\045\uffd5\047\uffd5\050\uffd5\001\002\000\032\004\uffda\006" +
    "\uffda\033\uffda\034\uffda\035\uffda\036\uffda\042\105\043\104" +
    "\044\106\045\107\047\uffda\050\uffda\001\002\000\020\022" +
    "\040\023\037\024\046\025\045\026\042\027\041\030\043" +
    "\001\002\000\004\050\077\001\002\000\022\004\uffdf\006" +
    "\uffdf\033\uffdf\034\uffdf\035\uffdf\036\uffdf\047\uffdf\050\uffdf" +
    "\001\002\000\022\004\uffe2\006\uffe2\033\uffe2\034\uffe2\035" +
    "\073\036\074\047\uffe2\050\uffe2\001\002\000\014\031\062" +
    "\032\064\040\070\047\065\050\063\001\002\000\014\031" +
    "\062\032\064\040\070\047\065\050\063\001\002\000\022" +
    "\004\uffe0\006\uffe0\033\uffe0\034\uffe0\035\uffe0\036\uffe0\047" +
    "\uffe0\050\uffe0\001\002\000\022\004\uffe1\006\uffe1\033\uffe1" +
    "\034\uffe1\035\uffe1\036\uffe1\047\uffe1\050\uffe1\001\002\000" +
    "\006\011\033\041\uffd3\001\002\000\004\041\101\001\002" +
    "\000\032\004\uffd6\006\uffd6\033\uffd6\034\uffd6\035\uffd6\036" +
    "\uffd6\042\uffd6\043\uffd6\044\uffd6\045\uffd6\047\uffd6\050\uffd6" +
    "\001\002\000\004\004\103\001\002\000\014\004\uffe6\006" +
    "\uffe6\034\uffe6\047\uffe6\050\uffe6\001\002\000\014\031\062" +
    "\032\064\040\070\047\065\050\063\001\002\000\014\031" +
    "\062\032\064\040\070\047\065\050\063\001\002\000\014" +
    "\031\062\032\064\040\070\047\065\050\063\001\002\000" +
    "\014\031\062\032\064\040\070\047\065\050\063\001\002" +
    "\000\022\004\uffdc\006\uffdc\033\uffdc\034\uffdc\035\uffdc\036" +
    "\uffdc\047\uffdc\050\uffdc\001\002\000\022\004\uffdb\006\uffdb" +
    "\033\uffdb\034\uffdb\035\uffdb\036\uffdb\047\uffdb\050\uffdb\001" +
    "\002\000\022\004\uffde\006\uffde\033\uffde\034\uffde\035\uffde" +
    "\036\uffde\047\uffde\050\uffde\001\002\000\022\004\uffdd\006" +
    "\uffdd\033\uffdd\034\uffdd\035\uffdd\036\uffdd\047\uffdd\050\uffdd" +
    "\001\002\000\004\004\ufff2\001\002\000\014\031\062\032" +
    "\064\040\070\047\065\050\063\001\002\000\016\004\uffe5" +
    "\006\uffe5\033\117\034\uffe5\047\uffe5\050\uffe5\001\002\000" +
    "\014\031\062\032\064\040\070\047\065\050\063\001\002" +
    "\000\022\004\uffe3\006\uffe3\033\uffe3\034\uffe3\035\073\036" +
    "\074\047\uffe3\050\uffe3\001\002\000\006\047\025\050\026" +
    "\001\002\000\004\004\ufff1\001\002\000\004\010\ufffe\001" +
    "\002\000\030\003\ufff3\007\ufff3\010\ufff3\012\ufff3\013\ufff3" +
    "\014\ufff3\016\ufff3\017\ufff3\020\ufff3\046\ufff3\047\ufff3\001" +
    "\002\000\030\003\ufff4\007\ufff4\010\ufff4\012\ufff4\013\ufff4" +
    "\014\ufff4\016\ufff4\017\ufff4\020\ufff4\046\ufff4\047\ufff4\001" +
    "\002\000\016\017\067\031\062\032\064\040\070\047\065" +
    "\050\063\001\002\000\006\006\130\034\115\001\002\000" +
    "\024\003\015\007\005\012\013\014\007\016\022\017\017" +
    "\020\021\046\020\047\014\001\002\000\030\003\ufffb\007" +
    "\ufffb\010\ufffb\012\ufffb\013\132\014\ufffb\016\ufffb\017\ufffb" +
    "\020\ufffb\046\ufffb\047\ufffb\001\002\000\024\003\015\007" +
    "\005\012\013\014\007\016\022\017\017\020\021\046\020" +
    "\047\014\001\002\000\030\003\ufffa\007\ufffa\010\ufffa\012" +
    "\ufffa\013\ufffa\014\ufffa\016\ufffa\017\ufffa\020\ufffa\046\ufffa" +
    "\047\ufffa\001\002\000\016\017\067\031\062\032\064\040" +
    "\070\047\065\050\063\001\002\000\006\004\136\034\115" +
    "\001\002\000\030\003\ufffc\007\ufffc\010\ufffc\012\ufffc\013" +
    "\ufffc\014\ufffc\016\ufffc\017\ufffc\020\ufffc\046\ufffc\047\ufffc" +
    "\001\002\000\032\002\uffff\003\uffff\007\uffff\010\uffff\012" +
    "\uffff\013\uffff\014\uffff\016\uffff\017\uffff\020\uffff\046\uffff" +
    "\047\uffff\001\002\000\004\015\ufff9\001\002\000\004\015" +
    "\142\001\002\000\004\047\143\001\002\000\024\003\015" +
    "\007\005\012\013\014\007\016\022\017\017\020\021\046" +
    "\020\047\014\001\002\000\030\003\ufff8\007\ufff8\010\ufff8" +
    "\012\ufff8\013\ufff8\014\ufff8\016\ufff8\017\ufff8\020\ufff8\046" +
    "\ufff8\047\ufff8\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\143\000\006\002\003\003\005\001\001\000\002\001" +
    "\001\000\012\003\007\004\010\005\015\016\011\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\003\007\004\122\005" +
    "\015\016\011\001\001\000\004\007\043\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\026\001\001\000\002\001\001\000\004" +
    "\006\031\001\001\000\004\010\027\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\034\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\120\001\001\000\014\011\057\012\071" +
    "\013\070\014\065\015\060\001\001\000\004\010\055\001" +
    "\001\000\004\010\053\001\001\000\004\010\052\001\001" +
    "\000\002\001\001\000\004\010\050\001\001\000\004\010" +
    "\046\001\001\000\004\010\047\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\054\001\001\000\002\001\001\000\004\010\056" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
    "\113\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\101\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\013\075\014\065\001\001\000\006\013" +
    "\074\014\065\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\077\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\014\112" +
    "\001\001\000\004\014\111\001\001\000\004\014\110\001" +
    "\001\000\004\014\107\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\011\115\012\071\013\070\014\065\001\001" +
    "\000\002\001\001\000\010\012\117\013\070\014\065\001" +
    "\001\000\002\001\001\000\004\010\121\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\011\057\012\071\013\070\014\065\015\126" +
    "\001\001\000\002\001\001\000\010\003\007\005\130\016" +
    "\011\001\001\000\002\001\001\000\010\003\007\005\132" +
    "\016\011\001\001\000\002\001\001\000\014\011\057\012" +
    "\071\013\070\014\065\015\134\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\017\140\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\003\007" +
    "\005\143\016\011\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error");
         if (info instanceof java_cup.runtime.Symbol) {

            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {
                m.append(" in line "+(s.left+1));

                if (s.right >= 0) {
                    m.append(", column "+(s.right+1));
                }
            }
        }

        m.append(" : "+message);
        System.err.println(m);
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {



 public String testString = "" ; 
 
 public static void test(){
 	System.out.println("testing methods");
 }	
 
  public class symbol{
 	String type;
 	String id;
 	symbol reach;
 	String clase;
 	
 	public symbol(String type, String id, symbol reach, String clase){
 		this.type = type;
 		this.id = id;
 		this.reach = reach;
 		this.clase = clase;
 	}
 	
 	public symbol(String type, String id, String clase){
 		this.type = type;
 		this.id = id;
 		this.clase = clase;
 		this.reach = null;
 	}
 	
 	public void remove(int i){
 		if(i >= 0)
 			this.remove(i);
 		else
 			return;
 	}

 }
 
 public ArrayList<symbol> globalList = new ArrayList<symbol>();
 

public int getPosition(String id){
 		for(int i=0; i < globalList.size(); i++){
 			if(globalList.get(i).id.compareTo(id) == 0) return i;
 		}
 		return -1;
 	}

 public boolean searchID(String id){
 	for(int i=0; i < globalList.size(); i++)
 		if(globalList.get(i).id.compareTo(id) == 0) return true;
 	
 	return false;
 }
 
 public boolean isConstant(String id){
	 for(int i=0; i < globalList.size(); i++)
 		if(globalList.get(i).id.compareTo(id) == 0)
 			if(globalList.get(i).clase.compareTo("constant") == 0) return true;
 		
 	
 	return false;
 }
 
 public void printTable(){
 		for(int i=0; i<globalList.size();i++){
 			System.out.println(globalList.get(i).id);
 		}
 	}


  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // strings ::= 
            {
              String RESULT =null;
		 RESULT = ""; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("strings",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // strings ::= UNION STRING strings 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ss = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ", " + s + ss; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("strings",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // factor ::= ID 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
	                	if(searchID(id))
	                		RESULT = id;
	                	else{
	                		System.err.println("Variable '"+id+"'no declarada anteriormente");
	                		System.exit(1); 
                    	}
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // factor ::= LBRACKET STRING strings RBRACKET 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String ss = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = "[" + s + ss + "]"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // factor ::= STRING 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // factor ::= FALSE 
            {
              String RESULT =null;
		 RESULT = "false"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // factor ::= TRUE 
            {
              String RESULT =null;
		 RESULT = "true"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // rel ::= factor 
            {
              String RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // rel ::= factor EQUALBIGGER factor 
            {
              String RESULT =null;
		int f1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String f1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = f1 + " >= " + f2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // rel ::= factor EQUALLESSER factor 
            {
              String RESULT =null;
		int f1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String f1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = f1 + " <= " + f2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // rel ::= factor BIGGER factor 
            {
              String RESULT =null;
		int f1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String f1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = f1 + " > " + f2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // rel ::= factor LESS factor 
            {
              String RESULT =null;
		int f1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String f1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = f1 + " < " + f2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // igualdad ::= rel 
            {
              String RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = r; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("igualdad",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // igualdad ::= igualdad DIFFERENT rel 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i + " != " + r; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("igualdad",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // igualdad ::= igualdad EQUAL rel 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i + " == " + r; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("igualdad",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // comb ::= igualdad 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comb",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // comb ::= comb AND igualdad 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = c + " && " + i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comb",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // bool ::= comb 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // bool ::= bool OR comb 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = b + " || " + c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // bool ::= CONVERSATION actions SEMI 
            {
              String RESULT =null;
		int actleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int actright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String act = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = act + ";\n"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // loc ::= ID 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    	if(searchID(id))
                    		RESULT = id;
                    	else{
                    		System.err.println("Variable '"+id+"'no declarada anteriormente");
                    		System.exit(1); 
                    	}
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("loc",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // loc ::= LET ID 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
                    	globalList.add(new symbol("String", id, "constant"));
                    	RESULT = "let " + id; 
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("loc",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // loc ::= CONST ID 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
    					globalList.add(new symbol("String", id, "constant"));
    					RESULT = "const " + id; 
    				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("loc",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // option ::= STRING strings 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ss = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s + ss; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("option",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // option ::= ID 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 	
 
    					if(searchID(id))
                    		RESULT = id;
                    	else{
                    		System.err.println("Variable '"+id+"'no declarada anteriormente");
                    		System.exit(1); 
                    	} 
    				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("option",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // actions ::= MEMBERS option 
            {
              String RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "slack.api('conversations.members', {\n\tchannel: " + op + "\n})";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("actions",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // actions ::= ARCHIVE option 
            {
              String RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "slack.api('conversations.archive', {\n\ttchannel: " + op + "\n})";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("actions",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // actions ::= PURPOSE option option 
            {
              String RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String op2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "slack.api('conversations.setPurpose', {\n\tchannel: " + op1 +",\n\tpurpose: " + op2 + "\n})";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("actions",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // actions ::= RENAME option option 
            {
              String RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String op2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "slack.api('conversations.rename', {\n\ttchannel: " + op1 +",\n\tname: " + op2 + "\n})";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("actions",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // actions ::= KICK option option 
            {
              String RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String op2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "slack.api('conversations.kick', {\n\ttchannel: " + op1 +",\n\tuser: " + op2 + "\n})";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("actions",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // actions ::= INVITE option option 
            {
              String RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String op2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "slack.api('conversations.invite', {\n\tchannel: " + op1 +",\n\tusers: " + op2 + "\n})";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("actions",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // actions ::= CREATE bool option 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "slack.api('conversations.create', {\n\tis_private: " + b +",\n\tname: " + op + "\n})";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("actions",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // instr ::= error SEMI 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instr ::= error RKEY 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instr ::= bloque 
            {
              String RESULT =null;
		int blleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int blright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String bl = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "{\n" + bl + "}\n"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instr ::= CHAT MESSAGE option option SEMI 
            {
              String RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String op1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                    	RESULT = "slack.api('chat.postMessage', {\n\tchannel: " + op1 + ",\n\ttext: " + op2 + "\n});\n"; 
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instr ::= CONVERSATION actions SEMI 
            {
              String RESULT =null;
		int actleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int actright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String act = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                    	RESULT = act + ";\n";  
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instr ::= FOR ID NT$0 IN ID instr 
            {
              String RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    	RESULT = id2 + ".forEach(" + id1 + " => " + i + ");\n"; 
                    	globalList.remove(getPosition(id1));
                    	
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NT$0 ::= 
            {
              String RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
globalList.add(new symbol("String", id1, "variable"));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instr ::= IF LPAREN bool RPAREN instr ELSE instr 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    	RESULT = "if( " + b + " )" + i1 + "else\n" + i2;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instr ::= IF LPAREN bool RPAREN instr 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    	RESULT = "if( " + b + " )" + i;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instr ::= loc ASSIGN bool SEMI 
            {
              String RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
    					if(isConstant(l)){
    						System.err.println("trying to change constant '" + l +"': Semantic error\n aborting code generation");
    						System.exit(1); 
    					}
    					else
    						RESULT = l + " = " + b + ";\n"; 
    				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instrs ::= 
            {
              String RESULT =null;
		 RESULT = ""; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrs",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instrs ::= instr instrs 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ins = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    					if(i == null)
    						RESULT = "ERROR\n" + ins;
    					else 
    						RESULT = i + ins;
    				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrs",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // bloque ::= LKEY instrs RKEY 
            {
              String RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String ins = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = ins;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // programa ::= bloque 
            {
              String RESULT =null;
		int blleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int blright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String bl = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						 RESULT = "const Slack = require('slack');\nslack = Slack();\n\n" + bl; 
						 printTable();
						 
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

