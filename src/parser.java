
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun May 02 09:17:45 CDT 2021
//----------------------------------------------------

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun May 02 09:17:45 CDT 2021
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\052\000\002\002\005\000\002\002\004\000\002\003" +
    "\004\000\002\003\002\000\002\004\006\000\002\004\007" +
    "\000\002\004\011\000\002\004\007\000\002\004\005\000" +
    "\002\004\007\000\002\004\003\000\002\005\005\000\002" +
    "\005\005\000\002\005\005\000\002\005\005\000\002\005" +
    "\005\000\002\005\004\000\002\005\004\000\002\006\003" +
    "\000\002\006\004\000\002\007\004\000\002\007\003\000" +
    "\002\015\005\000\002\015\005\000\002\015\003\000\002" +
    "\010\005\000\002\010\003\000\002\011\005\000\002\011" +
    "\005\000\002\011\003\000\002\012\005\000\002\012\005" +
    "\000\002\012\005\000\002\012\005\000\002\012\003\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\013\006\000\002\013\003\000\002\014\005\000\002\014" +
    "\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\133\000\004\007\004\001\002\000\022\007\ufffe\010" +
    "\ufffe\012\ufffe\014\ufffe\016\ufffe\017\ufffe\020\ufffe\046\ufffe" +
    "\001\002\000\004\002\006\001\002\000\004\002\000\001" +
    "\002\000\022\007\004\010\010\012\013\014\011\016\021" +
    "\017\016\020\020\046\015\001\002\000\026\002\001\007" +
    "\001\010\001\012\001\013\001\014\001\016\001\017\001" +
    "\020\001\046\001\001\002\000\004\046\132\001\002\000" +
    "\024\007\ufff7\010\ufff7\012\ufff7\013\ufff7\014\ufff7\016\ufff7" +
    "\017\ufff7\020\ufff7\046\ufff7\001\002\000\004\005\124\001" +
    "\002\000\004\037\121\001\002\000\004\037\uffec\001\002" +
    "\000\020\022\036\023\035\024\043\025\044\026\040\027" +
    "\037\030\041\001\002\000\022\007\uffff\010\uffff\012\uffff" +
    "\014\uffff\016\uffff\017\uffff\020\uffff\046\uffff\001\002\000" +
    "\004\021\023\001\002\000\004\046\022\001\002\000\004" +
    "\037\uffed\001\002\000\006\046\024\047\025\001\002\000" +
    "\010\004\uffef\046\uffef\047\uffef\001\002\000\012\004\uffd8" +
    "\011\032\046\uffd8\047\uffd8\001\002\000\006\046\024\047" +
    "\025\001\002\000\004\004\030\001\002\000\024\007\ufff8" +
    "\010\ufff8\012\ufff8\013\ufff8\014\ufff8\016\ufff8\017\ufff8\020" +
    "\ufff8\046\ufff8\001\002\000\010\004\uffee\046\uffee\047\uffee" +
    "\001\002\000\004\047\033\001\002\000\014\004\uffd8\011" +
    "\032\041\uffd8\046\uffd8\047\uffd8\001\002\000\012\004\uffd9" +
    "\041\uffd9\046\uffd9\047\uffd9\001\002\000\006\046\024\047" +
    "\025\001\002\000\016\017\065\031\060\032\062\040\066" +
    "\046\063\047\061\001\002\000\006\046\024\047\025\001" +
    "\002\000\006\046\024\047\025\001\002\000\006\046\024" +
    "\047\025\001\002\000\004\004\050\001\002\000\006\046" +
    "\024\047\025\001\002\000\006\046\024\047\025\001\002" +
    "\000\004\004\ufff1\001\002\000\006\046\024\047\025\001" +
    "\002\000\004\004\ufff2\001\002\000\024\007\ufff9\010\ufff9" +
    "\012\ufff9\013\ufff9\014\ufff9\016\ufff9\017\ufff9\020\ufff9\046" +
    "\ufff9\001\002\000\004\004\ufff0\001\002\000\006\046\024" +
    "\047\025\001\002\000\004\004\ufff4\001\002\000\006\046" +
    "\024\047\025\001\002\000\004\004\ufff3\001\002\000\016" +
    "\004\uffe9\006\uffe9\033\115\034\uffe9\046\uffe9\047\uffe9\001" +
    "\002\000\010\034\113\046\024\047\025\001\002\000\032" +
    "\004\uffde\006\uffde\033\uffde\034\uffde\035\uffde\036\uffde\042" +
    "\uffde\043\uffde\044\uffde\045\uffde\046\uffde\047\uffde\001\002" +
    "\000\032\004\uffdc\006\uffdc\033\uffdc\034\uffdc\035\uffdc\036" +
    "\uffdc\042\uffdc\043\uffdc\044\uffdc\045\uffdc\046\uffdc\047\uffdc" +
    "\001\002\000\032\004\uffdd\006\uffdd\033\uffdd\034\uffdd\035" +
    "\uffdd\036\uffdd\042\uffdd\043\uffdd\044\uffdd\045\uffdd\046\uffdd" +
    "\047\uffdd\001\002\000\032\004\uffda\006\uffda\033\uffda\034" +
    "\uffda\035\uffda\036\uffda\042\uffda\043\uffda\044\uffda\045\uffda" +
    "\046\uffda\047\uffda\001\002\000\032\004\uffdf\006\uffdf\033" +
    "\uffdf\034\uffdf\035\uffdf\036\uffdf\042\102\043\104\044\103" +
    "\045\105\046\uffdf\047\uffdf\001\002\000\020\022\036\023" +
    "\035\024\043\025\044\026\040\027\037\030\041\001\002" +
    "\000\004\047\075\001\002\000\022\004\uffe4\006\uffe4\033" +
    "\uffe4\034\uffe4\035\uffe4\036\uffe4\046\uffe4\047\uffe4\001\002" +
    "\000\022\004\uffe7\006\uffe7\033\uffe7\034\uffe7\035\071\036" +
    "\072\046\uffe7\047\uffe7\001\002\000\014\031\060\032\062" +
    "\040\066\046\063\047\061\001\002\000\014\031\060\032" +
    "\062\040\066\046\063\047\061\001\002\000\022\004\uffe5" +
    "\006\uffe5\033\uffe5\034\uffe5\035\uffe5\036\uffe5\046\uffe5\047" +
    "\uffe5\001\002\000\022\004\uffe6\006\uffe6\033\uffe6\034\uffe6" +
    "\035\uffe6\036\uffe6\046\uffe6\047\uffe6\001\002\000\006\011" +
    "\032\041\uffd8\001\002\000\004\041\077\001\002\000\032" +
    "\004\uffdb\006\uffdb\033\uffdb\034\uffdb\035\uffdb\036\uffdb\042" +
    "\uffdb\043\uffdb\044\uffdb\045\uffdb\046\uffdb\047\uffdb\001\002" +
    "\000\004\004\101\001\002\000\014\004\uffeb\006\uffeb\034" +
    "\uffeb\046\uffeb\047\uffeb\001\002\000\014\031\060\032\062" +
    "\040\066\046\063\047\061\001\002\000\014\031\060\032" +
    "\062\040\066\046\063\047\061\001\002\000\014\031\060" +
    "\032\062\040\066\046\063\047\061\001\002\000\014\031" +
    "\060\032\062\040\066\046\063\047\061\001\002\000\022" +
    "\004\uffe1\006\uffe1\033\uffe1\034\uffe1\035\uffe1\036\uffe1\046" +
    "\uffe1\047\uffe1\001\002\000\022\004\uffe2\006\uffe2\033\uffe2" +
    "\034\uffe2\035\uffe2\036\uffe2\046\uffe2\047\uffe2\001\002\000" +
    "\022\004\uffe0\006\uffe0\033\uffe0\034\uffe0\035\uffe0\036\uffe0" +
    "\046\uffe0\047\uffe0\001\002\000\022\004\uffe3\006\uffe3\033" +
    "\uffe3\034\uffe3\035\uffe3\036\uffe3\046\uffe3\047\uffe3\001\002" +
    "\000\004\004\ufff6\001\002\000\014\031\060\032\062\040" +
    "\066\046\063\047\061\001\002\000\016\004\uffea\006\uffea" +
    "\033\115\034\uffea\046\uffea\047\uffea\001\002\000\014\031" +
    "\060\032\062\040\066\046\063\047\061\001\002\000\022" +
    "\004\uffe8\006\uffe8\033\uffe8\034\uffe8\035\071\036\072\046" +
    "\uffe8\047\uffe8\001\002\000\006\046\024\047\025\001\002" +
    "\000\004\004\ufff5\001\002\000\016\017\065\031\060\032" +
    "\062\040\066\046\063\047\061\001\002\000\006\004\123" +
    "\034\113\001\002\000\024\007\ufffd\010\ufffd\012\ufffd\013" +
    "\ufffd\014\ufffd\016\ufffd\017\ufffd\020\ufffd\046\ufffd\001\002" +
    "\000\016\017\065\031\060\032\062\040\066\046\063\047" +
    "\061\001\002\000\006\006\126\034\113\001\002\000\020" +
    "\007\004\012\013\014\011\016\021\017\016\020\020\046" +
    "\015\001\002\000\024\007\ufffc\010\ufffc\012\ufffc\013\130" +
    "\014\ufffc\016\ufffc\017\ufffc\020\ufffc\046\ufffc\001\002\000" +
    "\020\007\004\012\013\014\011\016\021\017\016\020\020" +
    "\046\015\001\002\000\024\007\ufffb\010\ufffb\012\ufffb\013" +
    "\ufffb\014\ufffb\016\ufffb\017\ufffb\020\ufffb\046\ufffb\001\002" +
    "\000\004\015\133\001\002\000\004\046\134\001\002\000" +
    "\020\007\004\012\013\014\011\016\021\017\016\020\020" +
    "\046\015\001\002\000\024\007\ufffa\010\ufffa\012\ufffa\013" +
    "\ufffa\014\ufffa\016\ufffa\017\ufffa\020\ufffa\046\ufffa\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\133\000\004\002\004\001\001\000\004\003\006\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\002\011" +
    "\004\016\007\013\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\041\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\025\001\001\000\002\001\001\000\004\014" +
    "\030\001\001\000\004\006\026\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\014\033\001\001\000\002\001\001\000\004\006\116" +
    "\001\001\000\014\010\055\011\067\012\066\013\063\015" +
    "\056\001\001\000\004\006\053\001\001\000\004\006\051" +
    "\001\001\000\004\006\050\001\001\000\002\001\001\000" +
    "\004\006\045\001\001\000\004\006\044\001\001\000\002" +
    "\001\001\000\004\006\046\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\052\001\001" +
    "\000\002\001\001\000\004\006\054\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\111\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\077\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\012" +
    "\073\013\063\001\001\000\006\012\072\013\063\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\014\075\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\110\001\001\000\004\013" +
    "\107\001\001\000\004\013\106\001\001\000\004\013\105" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\010\113" +
    "\011\067\012\066\013\063\001\001\000\002\001\001\000" +
    "\010\011\115\012\066\013\063\001\001\000\002\001\001" +
    "\000\004\006\117\001\001\000\002\001\001\000\014\010" +
    "\055\011\067\012\066\013\063\015\121\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\010\055\011\067\012" +
    "\066\013\063\015\124\001\001\000\002\001\001\000\010" +
    "\002\011\004\126\007\013\001\001\000\002\001\001\000" +
    "\010\002\011\004\130\007\013\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\002\011\004" +
    "\134\007\013\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error");
         if (info instanceof java_cup.runtime.Symbol) {

            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {
                m.append(" in line "+(s.left+1));

                if (s.right >= 0) {
                    m.append(", column "+(s.right+1));
                }
            }
        }

        m.append(" : "+message);
        System.err.println(m);
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // strings ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("strings",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // strings ::= UNION STRING strings 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("strings",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // factor ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // factor ::= LBRACKET STRING strings RBRACKET 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // factor ::= STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // factor ::= FALSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // factor ::= TRUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // rel ::= factor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // rel ::= factor EQUALBIGGER factor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // rel ::= factor EQUALLESSER factor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // rel ::= factor BIGGER factor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // rel ::= factor LESS factor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // igualdad ::= rel 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("igualdad",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // igualdad ::= igualdad DIFFERENT rel 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("igualdad",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // igualdad ::= igualdad EQUAL rel 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("igualdad",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // comb ::= igualdad 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comb",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // comb ::= comb AND igualdad 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comb",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // bool ::= comb 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // bool ::= bool OR comb 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // bool ::= CONVERSATION actions SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // loc ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("loc",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // loc ::= CONST ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("loc",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // option ::= STRING strings 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("option",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // option ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("option",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // actions ::= MEMBERS option 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("actions",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // actions ::= ARCHIVE option 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("actions",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // actions ::= PURPOSE option option 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("actions",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // actions ::= RENAME option option 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("actions",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // actions ::= KICK option option 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("actions",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // actions ::= INVITE option option 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("actions",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // actions ::= CREATE bool option 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("actions",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instr ::= bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instr ::= CHAT MESSAGE option option SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instr ::= CONVERSATION actions SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instr ::= FOR ID IN ID instr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instr ::= IF LPAREN bool RPAREN instr ELSE instr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instr ::= IF LPAREN bool RPAREN instr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instr ::= loc ASSIGN bool SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instrs ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrs",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // instrs ::= instrs instr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrs",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= bloque EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // bloque ::= LKEY instrs RKEY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

