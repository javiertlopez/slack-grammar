import java_cup.runtime.*;
 
import java.util.ArrayList;
   
action code {:

 public String testString = "" ; 
 
 public static void test(){
 	System.out.println("testing methods");
 }	
 
  public class symbol{
 	String type;
 	String id;
 	symbol reach;
 	String clase;
 	
 	public symbol(String type, String id, symbol reach, String clase){
 		this.type = type;
 		this.id = id;
 		this.reach = reach;
 		this.clase = clase;
 	}
 	
 	public symbol(String type, String id, String clase){
 		this.type = type;
 		this.id = id;
 		this.clase = clase;
 		this.reach = null;
 	}
 	
 	public void remove(int i){
 		if(i >= 0)
 			this.remove(i);
 		else
 			return;
 	}

 }
 
 public ArrayList<symbol> globalList = new ArrayList<symbol>();
 

public int getPosition(String id){
 		for(int i=0; i < globalList.size(); i++){
 			if(globalList.get(i).id.compareTo(id) == 0) return i;
 		}
 		return -1;
 	}

 public boolean searchID(String id){
 	for(int i=0; i < globalList.size(); i++)
 		if(globalList.get(i).id.compareTo(id) == 0) return true;
 	
 	return false;
 }
 
 public boolean isConstant(String id){
	 for(int i=0; i < globalList.size(); i++)
 		if(globalList.get(i).id.compareTo(id) == 0)
 			if(globalList.get(i).clase.compareTo("constant") == 0) return true;
 		
 	
 	return false;
 }
 
 public void printTable(){
 		for(int i=0; i<globalList.size();i++){
 			System.out.println(globalList.get(i).id);
 		}
 	}

:}


parser code {:
    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error");
         if (info instanceof java_cup.runtime.Symbol) {

            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {
                m.append(" in line "+(s.left+1));

                if (s.right >= 0) {
                    m.append(", column "+(s.right+1));
                }
            }
        }

        m.append(" : "+message);
        System.err.println(m);
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
    }
:};



/* ------------Declaration of Terminals and Non Terminals Section----------- */

terminal           SEMI, LPAREN, RPAREN, LKEY, RKEY, UNION, IF, ELSE, FOR, IN, CONST, CONVERSATION, CHAT,
      				MESSAGE, CREATE, INVITE, PURPOSE, ARCHIVE, KICK, RENAME, MEMBERS, TRUE, FALSE, AND,
					OR, EQUAL, DIFFERENT, ASSIGN, LBRACKET, RBRACKET, LESS, BIGGER, EQUALBIGGER, EQUALLESSER, LET;
terminal String    ID, STRING;


non terminal String 	programa, bloque, instrs, instr, strings, actions, option,comb, igualdad, rel, factor, bool, loc;

/* -------------Precedence and Associatively of Terminals Section----------- */

precedence left ELSE;
/* ----------------------------Grammar Section-------------------- */

/*----------------------------------------------
	programa    ::= bloque 
	
    bloque      ::= LKEY instrs RKEY

    instrs      ::= instr instrs
                    | 

    instr       ::= loc ASSIGN bool SEMI
                    | IF LPAREN bool RPAREN instr
                    | IF LPAREN bool RPAREN instr ELSE instr
                    | FOR ID IN ID instr
                    | CONVERSATION actions SEMI
                    | CHAT MESSAGE option option SEMI
                    | bloque

    actions     ::= CREATE bool:b option:op	
                    | INVITE option:op1 option:op2
                    | KICK option:op1 option:op2
                    | RENAME option:op1 option:op2
                    | PURPOSE option:op1 option:op2
                    | ARCHIVE option:op
                    | MEMBERS option:op

    option      ::= ID
                    | STRING strings 

    loc         ::= CONST ID
    				| LET ID
                    | ID

    bool        ::= CONVERSATION actions SEMI
                    | bool OR comb
                    | comb

    comb        ::= comb AND igualdad
                    | igualdad

    igualdad    ::= igualdad EQUAL rel
                    | igualdad DIFFERENT rel
                    | rel

    rel         ::= factor LESS factor
                    | factor BIGGER factor
                    | factor EQUALLESSER factor
                    | factor EQUALBIGGER factor
                    | factor

    factor      ::= TRUE
                    | FALSE
                    | STRING
                    | LBRACKET STRING strings RBRACKET
                    | ID

    strings     ::= UNION STRING strings
                    | 
                 
----------------------------------------------------*/
	programa	::= bloque:bl 
					{:
						 RESULT = "const Slack = require('slack');\nslack = Slack();\n\n" + bl; 
						 printTable();
						 
					:}
					;
	
	bloque      ::= LKEY instrs:ins RKEY {: RESULT = ins;:}
	 				;

    instrs      ::= instr:i instrs:ins 
    				{:
    					if(i == null)
    						RESULT = "ERROR\n" + ins;
    					else 
    						RESULT = i + ins;
    				:}
                    | 
                    {: RESULT = ""; :}
                    ;

    instr       ::= loc:l ASSIGN bool:b SEMI 
    				{: 
    					if(isConstant(l)){
    						System.err.println("trying to change constant '" + l +"': Semantic error\n aborting code generation");
    						System.exit(1); 
    					}
    					else
    						RESULT = l + " = " + b + ";\n"; 
    				:}
                    | 
                    IF LPAREN bool:b RPAREN instr:i 
                    {:
                    	RESULT = "if( " + b + " )" + i;
                    :}
                    | 
                    IF LPAREN bool:b RPAREN instr:i1 ELSE instr:i2
                    {:
                    	RESULT = "if( " + b + " )" + i1 + "else\n" + i2;
                    :}
                    | 
                    FOR ID:id1{:globalList.add(new symbol("String", id1, "variable"));:} 
                    IN ID:id2 instr:i
                    {:
                    	RESULT = id2 + ".forEach(" + id1 + " => " + i + ");\n"; 
                    	globalList.remove(getPosition(id1));
                    	
                    :}
                    | 
                    CONVERSATION actions:act SEMI 
                    {: 
                    	RESULT = act + ";\n";  
                    :}
                    | 
                    CHAT MESSAGE option:op1 option:op2 SEMI
                    {: 
                    	RESULT = "slack.api('chat.postMessage', {\n\tchannel: " + op1 + ",\n\ttext: " + op2 + "\n});\n"; 
                    :} 
                    | 
                    bloque:bl {: RESULT = "{\n" + bl + "}\n"; :}
                    | error RKEY
                    | error SEMI
                    ;

    actions     ::= CREATE bool:b option:op
    				{: RESULT = "slack.api('conversations.create', {\n\tis_private: " + b +",\n\tname: " + op + "\n})";:}
                    | 
                    INVITE option:op1 option:op2
                    {: RESULT = "slack.api('conversations.invite', {\n\tchannel: " + op1 +",\n\tusers: " + op2 + "\n})";:}
                    | 
                    KICK option:op1 option:op2
                    {: RESULT = "slack.api('conversations.kick', {\n\ttchannel: " + op1 +",\n\tuser: " + op2 + "\n})";:}
                    | 
                    RENAME option:op1 option:op2
                    {: RESULT = "slack.api('conversations.rename', {\n\ttchannel: " + op1 +",\n\tname: " + op2 + "\n})";:}
                    | 
                    PURPOSE option:op1 option:op2
                    {: RESULT = "slack.api('conversations.setPurpose', {\n\tchannel: " + op1 +",\n\tpurpose: " + op2 + "\n})";:}
                    | 
                    ARCHIVE option:op
                    {: RESULT = "slack.api('conversations.archive', {\n\ttchannel: " + op + "\n})";:}
                    | 
                    MEMBERS option:op
                    {: RESULT = "slack.api('conversations.members', {\n\tchannel: " + op + "\n})";:}
                    ;

    option      ::= ID:id 
    				{: 	
 
    					if(searchID(id))
                    		RESULT = id;
                    	else{
                    		System.err.println("Variable '"+id+"'no declarada anteriormente");
                    		System.exit(1); 
                    	} 
    				:}
                    | 
                    STRING:s strings:ss
                    {: RESULT = s + ss; :}
                    ;

    loc         ::= CONST ID:id
    				{: 
    					globalList.add(new symbol("String", id, "constant"));
    					RESULT = "const " + id; 
    				:}
                    | 
                    LET ID:id
                    {:  
                    	globalList.add(new symbol("String", id, "constant"));
                    	RESULT = "let " + id; 
                    :}
                    |
                    ID:id
                    {: 
                    	if(searchID(id))
                    		RESULT = id;
                    	else{
                    		System.err.println("Variable '"+id+"'no declarada anteriormente");
                    		System.exit(1); 
                    	}
                    :}
                    ;

    bool        ::= CONVERSATION actions:act SEMI
    				{: RESULT = act + ";\n"; :}
                    | 
                    bool:b OR comb:c
                    {: RESULT = b + " || " + c; :}
                    | 
                    comb:c {: RESULT = c; :}
                    ;

    comb        ::= comb:c AND igualdad:i
    				{: RESULT = c + " && " + i; :}
                    | 
                    igualdad:i {: RESULT = i; :}
                    ;

    igualdad    ::= igualdad:i EQUAL rel:r
    				{: RESULT = i + " == " + r; :}
                    | 
                    igualdad:i DIFFERENT rel:r
                    {: RESULT = i + " != " + r; :}
                    | 
                    rel:r {: RESULT = r; :}
                    ;

    rel         ::= factor:f1 LESS factor:f2
    				{: RESULT = f1 + " < " + f2; :} 
                    | 
                    factor:f1 BIGGER factor:f2
                    {: RESULT = f1 + " > " + f2; :} 
                    | 
                    factor:f1 EQUALLESSER factor:f2
                    {: RESULT = f1 + " <= " + f2; :} 
                    | 
                    factor:f1 EQUALBIGGER factor:f2
                    {: RESULT = f1 + " >= " + f2; :} 
                    | 
                    factor:f {: RESULT = f; :} 
                    ;

    factor      ::= TRUE {: RESULT = "true"; :}
                    | 
                    FALSE {: RESULT = "false"; :}
                    | 
                    STRING:s {: RESULT = s; :}
                    | 
                    LBRACKET STRING:s strings:ss RBRACKET 
                    {: RESULT = "[" + s + ss + "]"; :}
                    |
                    ID:id 
                    {: 
	                	if(searchID(id))
	                		RESULT = id;
	                	else{
	                		System.err.println("Variable '"+id+"'no declarada anteriormente");
	                		System.exit(1); 
                    	}
                    :}
                    ;

    strings     ::= UNION STRING:s strings:ss {: RESULT = ", " + s + ss; :} 
                    | 
                   		{: RESULT = ""; :}
                    ;
                 