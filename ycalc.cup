import java_cup.runtime.*;

   
action code {:

 public String testString = "" ; 
 public static String API_VAR = "slack.api";
 
 
:}


parser code {:
    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error");
         if (info instanceof java_cup.runtime.Symbol) {

            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {
                m.append(" in line "+(s.left+1));

                if (s.right >= 0) {
                    m.append(", column "+(s.right+1));
                }
            }
        }

        m.append(" : "+message);
        System.err.println(m);
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }
:};



/* ------------Declaration of Terminals and Non Terminals Section----------- */

terminal           SEMI, LPAREN, RPAREN, LKEY, RKEY, UNION, IF, ELSE, FOR, IN, CONST, CONVERSATION, CHAT,
      				MESSAGE, CREATE, INVITE, PURPOSE, ARCHIVE, KICK, RENAME, MEMBERS, TRUE, FALSE, AND,
					OR, EQUAL, DIFFERENT, ASSIGN, LBRACKET, RBRACKET, LESS, BIGGER, EQUALBIGGER, EQUALLESSER, LET;
terminal String    ID, STRING;

non terminal Object     bloque, instrs, instr, programa;
non terminal String 	strings, actions, option,comb, igualdad, rel, factor, bool, loc;

/* -------------Precedence and Associatively of Terminals Section----------- */

precedence left ELSE;
/* ----------------------------Grammar Section-------------------- */

/*----------------------------------------------
	programa    ::= bloque 
	
    bloque      ::= LKEY instrs RKEY

    instrs      ::= instr instrs
                    | 

    instr       ::= loc ASSIGN bool SEMI
                    | IF LPAREN bool RPAREN instr
                    | IF LPAREN bool RPAREN instr ELSE instr
                    | FOR ID IN ID instr
                    | CONVERSATION actions:act SEMI
                    {: System.out.println(act + ";");
                    | CHAT MESSAGE option option SEMI
                    | bloque

    actions     ::= CREATE bool:b option:op	
                    | INVITE option:op1 option:op2
                    | KICK option:op1 option:op2
                    | RENAME option:op1 option:op2
                    | PURPOSE option:op1 option:op2
                    | ARCHIVE option:op
                    | MEMBERS option:op

    option      ::= ID
                    | STRING strings 

    loc         ::= CONST ID
    				| LET ID
                    | ID

    bool        ::= CONVERSATION actions SEMI
                    | bool OR comb
                    | comb

    comb        ::= comb AND igualdad
                    | igualdad

    igualdad    ::= igualdad EQUAL rel
                    | igualdad DIFFERENT rel
                    | rel

    rel         ::= factor LESS factor
                    | factor BIGGER factor
                    | factor EQUALLESSER factor
                    | factor EQUALBIGGER factor
                    | factor

    factor      ::= TRUE
                    | FALSE
                    | STRING
                    | LBRACKET STRING strings RBRACKET
                    | ID

    strings     ::= UNION STRING strings
                    | 
                 
----------------------------------------------------*/
	programa	::= bloque {: System.out.println("program"); :}
					;
	
	bloque      ::= LKEY instrs RKEY
	 				;

    instrs      ::= instr instrs
                    | 
                    
                    ;

    instr       ::= loc:l ASSIGN bool:b SEMI 
    				{: System.out.println(l+" = " + b + ";"); :}
                    | 
                    IF LPAREN bool RPAREN instr 
                    | 
                    IF LPAREN bool RPAREN instr ELSE instr
                    | 
                    FOR ID IN ID instr
                    | 
                    CONVERSATION actions:act SEMI {: System.out.println(act + ";"); :}
                    | 
                    CHAT MESSAGE option:op1 option:op2 SEMI
                    {: 
                    	testString = "slack.api('chat.postMessage', {\n\tchannel: " + op1 + ",\n\ttext: " + op2 + "\n});"; 
                    	System.out.println(testString);
                    	:} 
                    | 
                    bloque
                    ;

    actions     ::= CREATE bool:b option:op
    				{: RESULT = "slack.api('conversations.create', {\n\tis_private: " + b +",\n\tname: " + op + "\n})";:}
                    | 
                    INVITE option:op1 option:op2
                    {: RESULT = "slack.api('conversations.invite', {\n\tchannel: " + op1 +",\n\tusers: " + op2 + "\n})";:}
                    | 
                    KICK option:op1 option:op2
                    {: RESULT = "slack.api('conversations.kick', {\n\ttchannel: " + op1 +",\n\tuser: " + op2 + "\n})";:}
                    | 
                    RENAME option:op1 option:op2
                    {: RESULT = "slack.api('conversations.rename', {\n\ttchannel: " + op1 +",\n\tname: " + op2 + "\n})";:}
                    | 
                    PURPOSE option:op1 option:op2
                    {: RESULT = "slack.api('conversations.setPurpose', {\n\tchannel: " + op1 +",\n\tpurpose: " + op2 + "\n})";:}
                    | 
                    ARCHIVE option:op
                    {: RESULT = "slack.api('conversations.archive', {\n\ttchannel: " + op + "\n})";:}
                    | 
                    MEMBERS option:op
                    {: RESULT = "slack.api('conversations.members', {\n\tchannel: " + op + "\n})";:}
                    ;

    option      ::= ID:id {: RESULT = id; :}
                    | 
                    STRING:s strings:ss
                    {: RESULT = s + ss; :}
                    ;

    loc         ::= CONST ID:id
    				{: RESULT = "const " + id; :}
                    | 
                    LET ID:id
                    {:  RESULT = "let " + id; :}
                    |
                    ID
                    {::}
                    ;

    bool        ::= CONVERSATION actions SEMI
                    | 
                    bool OR comb
                    | 
                    comb:c {: RESULT = c; :}
                    ;

    comb        ::= comb AND igualdad
                    | 
                    igualdad:i {: RESULT = i; :}
                    ;

    igualdad    ::= igualdad EQUAL rel
                    | 
                    igualdad DIFFERENT rel
                    | 
                    rel:r {: RESULT = r; :}
                    ;

    rel         ::= factor LESS factor
                    | 
                    factor BIGGER factor
                    | 
                    factor EQUALLESSER factor
                    | 
                    factor EQUALBIGGER factor
                    | 
                    factor:f {: RESULT = f; :} 
                    ;

    factor      ::= TRUE {: RESULT = "true"; :}
                    | 
                    FALSE {: RESULT = "false"; :}
                    | 
                    STRING:s {: RESULT = s; :}
                    | 
                    LBRACKET STRING:s strings:ss RBRACKET 
                    {: RESULT = "[" + s + ss + "]"; :}
                    |
                    ID:id {: RESULT = id; :}
                    ;

    strings     ::= UNION STRING:s strings:ss {: RESULT = ", " + s + ss; :} 
                    | 
                   		{: RESULT = ""; :}
                    ;
                 